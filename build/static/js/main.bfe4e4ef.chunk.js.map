{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","vote","title","overview","poster_path","vote_average","className","src","alt","App","useState","movies","setMovies","searchTerm","setSearchTerm","getMovies","API","fetch","then","res","json","data","console","log","results","useEffect","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","length","map","movie","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gKA8BeA,EAhBF,SAAC,GAA6C,IAVtCC,EAUNC,EAA2C,EAA3CA,MAAMC,EAAqC,EAArCA,SAASC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aACtC,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAfD,mCAecH,EAAaI,IAAKN,IACpC,yBAAKI,UAAU,cACX,4BAAKJ,GACL,0BAAMI,UAAS,eAhBVL,EAgBiCI,EAf/CJ,GAAO,EACC,QACFA,EAAK,EACH,SAEA,SAUyDI,IAE5D,yBAAKC,UAAU,cACX,yCACA,2BAAIH,MCiCLM,MAlDf,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACNC,EADM,KACEC,EADF,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,KAIPC,EAAW,SAACC,GAChBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAOA,EAAIC,UAChBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZT,EAAUS,EAAKG,aAmBrB,OAfAC,qBAAU,WACRV,EAjBgB,yHAkBhB,IAcA,oCACA,gCACE,0BAAMW,SAfY,SAACC,GACrBA,EAAEC,iBACCf,IACDE,EApBa,6FAoBUF,GACvBC,EAAc,OAYZ,2BACEe,KAAK,SACLC,YAAY,YACZxB,UAAU,SACVyB,MAAQlB,EACRmB,SAbc,SAACL,GACrBb,EAAca,EAAEM,OAAOF,YAgBvB,yBAAKzB,UAAU,mBACbK,EAAOuB,OAAQ,GAAKvB,EAAOwB,KAAI,SAAAC,GAC9B,OAAO,kBAAC,EAAD,eAAOC,IAAKD,EAAME,IAAQF,UCtCpBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.bfe4e4ef.chunk.js","sourcesContent":["import React from \"react\";\n\nconst IMG_API = \"https://image.tmdb.org/t/p/w1280\";\n\nconst setVoteClass =(vote)=>{\n    if(vote>= 8){\n        return \"green\"\n    }else if(vote>6){\n        return \"orange\"\n    }else{\n        return \"red\"\n    }\n}\n\nconst Movie =({title,overview,poster_path,vote_average})=>{\n    return (\n        <div className=\"movie\">\n            <img src={IMG_API+poster_path} alt={title}/>\n            <div className=\"movie-info\">\n                <h3>{title}</h3>\n                <span className ={`tag ${setVoteClass(vote_average)}`}>{vote_average}</span>\n            </div>\n            <div className=\"movie-over\">\n                <h3>overview:</h3>\n                <p>{overview}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Movie;","import React,{useEffect,useState} from 'react';\n\nimport Movie from \"./components/Movie\";\n\nconst FEATURED_API =\"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=df2a18503eedd23f8004851927fc2b65&page=1\";\n\nconst SEARCH_API = \"https://api.themoviedb.org/3/search/movie?&api_key=df2a18503eedd23f8004851927fc2b65&query=\"\nfunction App() {\n  const [movies, setMovies]= useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  const getMovies =(API)=>{\n    fetch(API)\n      .then((res)=>res.json())\n      .then((data)=>{\n        console.log(data)\n        setMovies(data.results);\n      });\n  }\n\n  useEffect(()=>{\n    getMovies(FEATURED_API);\n  },[])\n  const handleOnSubmit =(e)=>{\n    e.preventDefault();\n    if(searchTerm){\n      getMovies(SEARCH_API + searchTerm);\n      setSearchTerm(\"\")\n    }\n  }\n\n  const handleOnChange =(e)=>{\n    setSearchTerm(e.target.value)\n  }\n\n  return (\n    <>\n    <header>\n      <form onSubmit={handleOnSubmit}>\n        <input \n          type=\"search\" \n          placeholder=\"Search...\" \n          className=\"search\"\n          value ={searchTerm}\n          onChange ={handleOnChange}\n        />\n      </form> \n    </header>\n    <div className=\"movie-container\">\n     {movies.length >0 && movies.map(movie=>{\n       return <Movie key={movie.id} {...movie}/>\n     })}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}